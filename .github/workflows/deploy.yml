name: PetClinic Application Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: petclinic
          MYSQL_DATABASE: petclinic
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Environment Setup
        run: |
          echo "Setting up environment..."
          echo "Workspace: $GITHUB_WORKSPACE"
          echo "User: $(whoami)"
          echo "Current directory: $(pwd)"
          
          mkdir -p prometheus/data grafana/data mysql/data
          chmod -R 755 prometheus/data grafana/data mysql/data || true
          
          echo "Environment setup completed!"

      - name: Setup Spring PetClinic Project
        run: |
          echo "Setting up Spring PetClinic project..."
          
          # Check if we have Java source files
          FOUND_JAVA=$(find . -name "*.java" -type f 2>/dev/null | head -5)
          FOUND_POM=$(find . -name "pom.xml" -type f 2>/dev/null | head -5)
          FOUND_GRADLE=$(find . -name "build.gradle*" -type f 2>/dev/null | head -5)
          
          if [ -n "$FOUND_JAVA" ] || [ -n "$FOUND_POM" ] || [ -n "$FOUND_GRADLE" ]; then
              echo "Found existing Java project files"
          else
              echo "No Java project found. Downloading Spring PetClinic..."
              
              # Clone the official Spring PetClinic project
              git clone https://github.com/spring-projects/spring-petclinic.git temp-petclinic
              
              # Create src directory structure in petclinic-project
              mkdir -p petclinic-project/src
              
              # Copy the Java project files to petclinic-project
              if [ -d "temp-petclinic" ]; then
                  cp -r temp-petclinic/src petclinic-project/
                  cp temp-petclinic/pom.xml petclinic-project/
                  cp temp-petclinic/mvnw petclinic-project/
                  cp temp-petclinic/mvnw.cmd petclinic-project/
                  cp -r temp-petclinic/.mvn petclinic-project/
                  
                  # Copy additional files if they exist
                  [ -f "temp-petclinic/README.md" ] && cp temp-petclinic/README.md petclinic-project/README-petclinic.md
                  
                  # Remove temporary directory
                  rm -rf temp-petclinic
                  
                  echo "Spring PetClinic project has been set up in petclinic-project/"
              else
                  echo "Failed to download Spring PetClinic project"
                  exit 1
              fi
          fi
          
          echo "Project setup completed!"

      - name: Workspace Verification
        run: |
          echo "Verifying workspace structure..."
          echo "Repository contents:"
          ls -la
          
          echo ""
          echo "petclinic-project directory contents:"
          if [ -d "petclinic-project" ]; then
              ls -la petclinic-project/
          fi
          
          echo ""
          echo "Searching for Java project files..."
          FOUND_POM=$(find . -name "pom.xml" -type f 2>/dev/null | head -5)
          FOUND_GRADLE=$(find . -name "build.gradle*" -type f 2>/dev/null | head -5)
          FOUND_MVN_WRAPPER=$(find . -name "mvnw" -type f 2>/dev/null | head -5)
          FOUND_JAVA=$(find . -name "*.java" -type f 2>/dev/null | head -10)
          
          if [ -n "$FOUND_POM" ]; then
              echo "Found pom.xml files:"
              echo "$FOUND_POM"
              FIRST_POM=$(echo "$FOUND_POM" | head -1)
              POM_DIR=$(dirname "$FIRST_POM")
              echo "Using pom.xml from: $FIRST_POM"
              echo "BUILD_DIR=$POM_DIR" >> $GITHUB_ENV
              echo "PROJECT_TYPE=maven" >> $GITHUB_ENV
          elif [ -n "$FOUND_GRADLE" ]; then
              echo "Found build.gradle files:"
              echo "$FOUND_GRADLE"
              FIRST_GRADLE=$(echo "$FOUND_GRADLE" | head -1)
              GRADLE_DIR=$(dirname "$FIRST_GRADLE")
              echo "Using build.gradle from: $FIRST_GRADLE"
              echo "BUILD_DIR=$GRADLE_DIR" >> $GITHUB_ENV
              echo "PROJECT_TYPE=gradle" >> $GITHUB_ENV
          elif [ -n "$FOUND_MVN_WRAPPER" ]; then
              echo "Found Maven wrapper files:"
              echo "$FOUND_MVN_WRAPPER"
              FIRST_WRAPPER=$(echo "$FOUND_MVN_WRAPPER" | head -1)
              WRAPPER_DIR=$(dirname "$FIRST_WRAPPER")
              echo "Using Maven wrapper from: $FIRST_WRAPPER"
              echo "BUILD_DIR=$WRAPPER_DIR" >> $GITHUB_ENV
              echo "PROJECT_TYPE=maven" >> $GITHUB_ENV
          else
              echo "No Java build files found even after setup attempt"
              echo "This might indicate a repository structure issue"
              exit 1
          fi
          
          if [ -n "$FOUND_JAVA" ]; then
              echo ""
              echo "Found Java source files:"
              echo "$FOUND_JAVA"
          fi
          
          echo ""
          echo "Searching for docker-compose.yml..."
          FOUND_COMPOSE=$(find . -name "docker-compose.yml" -type f 2>/dev/null | head -5)
          if [ -n "$FOUND_COMPOSE" ]; then
              echo "Found docker-compose.yml files:"
              echo "$FOUND_COMPOSE"
              FIRST_COMPOSE=$(echo "$FOUND_COMPOSE" | head -1)
              echo "Using docker-compose.yml from: $FIRST_COMPOSE"
              echo "COMPOSE_FILE=$FIRST_COMPOSE" >> $GITHUB_ENV
          else
              echo "No docker-compose.yml found - will use the one in petclinic-project if available"
              if [ -f "petclinic-project/docker-compose.yml" ]; then
                  echo "COMPOSE_FILE=petclinic-project/docker-compose.yml" >> $GITHUB_ENV
              else
                  echo "COMPOSE_FILE=" >> $GITHUB_ENV
              fi
          fi
          
          echo ""
          echo "Workspace verification completed!"

      - name: Environment Tools Check
        run: |
          echo "Checking development tools..."
          
          java -version
          echo "Java is available"
          
          if command -v mvn >/dev/null 2>&1; then
              mvn --version
              echo "Maven is available"
          elif [ -f "${BUILD_DIR:-./}/mvnw" ]; then
              echo "Maven wrapper found"
              chmod +x "${BUILD_DIR:-./}/mvnw"
          else
              echo "Neither Maven nor Maven wrapper found"
              exit 1
          fi
          
          docker --version
          
          # Check for docker compose (new) or docker-compose (legacy)
          if docker compose version >/dev/null 2>&1; then
              docker compose version
              echo "Docker Compose (plugin) is available"
              echo "COMPOSE_CMD=docker compose" >> $GITHUB_ENV
          elif command -v docker-compose >/dev/null 2>&1; then
              docker-compose --version
              echo "Docker Compose (standalone) is available"
              echo "COMPOSE_CMD=docker-compose" >> $GITHUB_ENV
          else
              echo "Docker Compose not found. Installing docker-compose..."
              # Install docker-compose if not available
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose --version
              echo "Docker Compose installed successfully"
              echo "COMPOSE_CMD=docker-compose" >> $GITHUB_ENV
          fi
          
          echo "All required tools are available"

      - name: Verify Project Structure
        run: |
          echo "Verifying project structure..."
          
          BUILD_PATH="${BUILD_DIR:-./}"
          cd "$BUILD_PATH"
          echo "Build directory contents:"
          ls -la
          
          echo "Checking essential files:"
          echo "pom.xml: $([ -f pom.xml ] && echo 'Found' || echo 'Missing')"
          echo "src directory: $([ -d src ] && echo 'Found' || echo 'Missing')"
          echo "mvnw: $([ -f mvnw ] && echo 'Found' || echo 'Missing')"
          echo "Dockerfile: $([ -f Dockerfile ] && echo 'Found' || echo 'Missing')"
          
          cd "$GITHUB_WORKSPACE"
          if [ -n "${COMPOSE_FILE}" ]; then
              DEPLOY_DIR=$(dirname "${COMPOSE_FILE}")
              cd "$DEPLOY_DIR"
              echo "Deploy directory contents:"
              ls -la
          fi
          
          echo "Project structure verified!"

      - name: Check Dependencies
        run: |
          echo "Checking project dependencies..."
          BUILD_PATH="${BUILD_DIR:-./}"
          cd "$BUILD_PATH"
          
          if grep -q "micrometer-registry-prometheus" pom.xml; then
              echo "Prometheus metrics dependency found"
          else
              echo "Prometheus metrics dependency not found"
              echo "Application will work but won't expose metrics endpoint"
          fi
          
          echo "Spring Boot dependencies:"
          grep -A 3 -B 3 "spring-boot-starter" pom.xml | head -20 || echo "Could not display dependencies"
          
          echo "Dependency check completed"

      - name: Build Application
        run: |
          echo "Building Spring Boot application..."
          BUILD_PATH="${BUILD_DIR:-./}"
          cd "$BUILD_PATH"
          echo "Working in: $(pwd)"
          
          if [ "${PROJECT_TYPE}" = "gradle" ]; then
              echo "Building with Gradle..."
              if [ -f "gradlew" ]; then
                  chmod +x gradlew
                  ./gradlew clean build -x test
              else
                  gradle clean build -x test
              fi
          else
              echo "Building with Maven..."
              if [ -f "mvnw" ]; then
                  chmod +x mvnw
                  echo "Using Maven wrapper..."
                  ./mvnw clean compile -DskipTests -Dmaven.test.skip=true
              else
                  echo "Using system Maven..."
                  mvn clean compile -DskipTests -Dmaven.test.skip=true
              fi
          fi
          
          echo "Application compiled successfully"

      - name: Run Tests
        run: |
          echo "Running tests..."
          BUILD_PATH="${BUILD_DIR:-./}"
          cd "$BUILD_PATH"
          
          if [ "${PROJECT_TYPE}" = "gradle" ]; then
              echo "Running tests with Gradle..."
              if [ -x "./gradlew" ]; then
                  ./gradlew test --exclude-task postgresIntegrationTests
              else
                  gradle test --exclude-task postgresIntegrationTests
              fi
          else
              echo "Running tests with Maven..."
              if [ -x "./mvnw" ]; then
                  ./mvnw test -Dtest="!PostgresIntegrationTests" -Dspring.docker.compose.skip.in-tests=true
              else
                  mvn test -Dtest="!PostgresIntegrationTests" -Dspring.docker.compose.skip.in-tests=true
              fi
          fi
          
          echo "Tests completed successfully"

      - name: Package Application
        run: |
          echo "Packaging application..."
          BUILD_PATH="${BUILD_DIR:-./}"
          cd "$BUILD_PATH"
          
          if [ "${PROJECT_TYPE}" = "gradle" ]; then
              echo "Packaging with Gradle..."
              if [ -x "./gradlew" ]; then
                  ./gradlew bootJar -x test
              else
                  gradle bootJar -x test
              fi
              echo "Generated artifacts:"
              ls -la build/libs/*.jar 2>/dev/null || echo "No JAR files found in build/libs"
          else
              echo "Packaging with Maven..."
              if [ -x "./mvnw" ]; then
                  ./mvnw package -DskipTests
              else
                  mvn package -DskipTests
              fi
              echo "Generated artifacts:"
              ls -la target/*.jar 2>/dev/null || echo "No JAR files found in target"
          fi
          
          echo "Application packaged successfully"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: petclinic-jar
          path: |
            **/target/*.jar
            **/build/libs/*.jar
            !**/target/*-sources.jar
            !**/target/*-javadoc.jar
            !**/build/libs/*-sources.jar
            !**/build/libs/*-javadoc.jar
          retention-days: 30

  docker-build-and-deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup PetClinic Project for Docker
        run: |
          echo "Setting up PetClinic project for Docker build..."
          
          # Download fresh copy since this is a new job
          git clone https://github.com/spring-projects/spring-petclinic.git temp-petclinic
          cp -r temp-petclinic/* .
          rm -rf temp-petclinic
          
          echo "Project files copied to root directory"
          ls -la

      - name: Prepare Docker Build
        run: |
          echo "Preparing Docker build environment..."
          
          # Verify required files are present
          echo "Verifying required files:"
          echo "pom.xml: $([ -f pom.xml ] && echo 'Present' || echo 'Missing')"
          echo "src/: $([ -d src ] && echo 'Present' || echo 'Missing')"
          echo "mvnw: $([ -f mvnw ] && echo 'Present' || echo 'Missing')"
          echo ".mvn/: $([ -d .mvn ] && echo 'Present' || echo 'Missing')"
          
          # Check if Dockerfile exists
          if [ ! -f "Dockerfile" ]; then
              echo "Creating optimized multi-stage Dockerfile..."
              
              # Create Dockerfile using echo commands
              echo "# Multi-stage build for Spring Boot application" > Dockerfile
              echo "FROM maven:3.8.7-eclipse-temurin-17 AS build" >> Dockerfile
              echo "WORKDIR /app" >> Dockerfile
              echo "" >> Dockerfile
              echo "# Copy pom.xml and Maven wrapper files" >> Dockerfile
              echo "COPY pom.xml ." >> Dockerfile
              echo "COPY mvnw ." >> Dockerfile
              echo "COPY .mvn .mvn" >> Dockerfile
              echo "" >> Dockerfile
              echo "# Make Maven wrapper executable and download dependencies" >> Dockerfile
              echo "RUN chmod +x ./mvnw" >> Dockerfile
              echo "RUN ./mvnw dependency:go-offline -B" >> Dockerfile
              echo "" >> Dockerfile
              echo "# Copy source code" >> Dockerfile
              echo "COPY src ./src" >> Dockerfile
              echo "" >> Dockerfile
              echo "# Build the application" >> Dockerfile
              echo "RUN ./mvnw clean package -DskipTests" >> Dockerfile
              echo "" >> Dockerfile
              echo "# Production stage" >> Dockerfile
              echo "FROM openjdk:17-jdk-slim" >> Dockerfile
              echo "WORKDIR /app" >> Dockerfile
              echo "" >> Dockerfile
              echo "# Install curl for health checks" >> Dockerfile
              echo "RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*" >> Dockerfile
              echo "" >> Dockerfile
              echo "# Copy the JAR file from build stage" >> Dockerfile
              echo "COPY --from=build /app/target/*.jar app.jar" >> Dockerfile
              echo "" >> Dockerfile
              echo "# Expose port 8080 (Spring Boot default)" >> Dockerfile
              echo "EXPOSE 8080" >> Dockerfile
              echo "" >> Dockerfile
              echo "# Add health check" >> Dockerfile
              echo "HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\" >> Dockerfile
              echo "  CMD curl -f http://localhost:8080/actuator/health || exit 1" >> Dockerfile
              echo "" >> Dockerfile
              echo "# Run the application" >> Dockerfile
              echo "ENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]" >> Dockerfile
              
              echo "Created multi-stage Dockerfile for Spring Boot application"
          else
              echo "Dockerfile already exists"
          fi
          
          echo "Docker build preparation completed"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Environment Variables
        run: |
          if [ -f "petclinic-build/pom.xml" ]; then
              echo "BUILD_DIR=petclinic-build" >> $GITHUB_ENV
          fi
          if [ -f "petclinic-project/docker-compose.yml" ]; then
              echo "COMPOSE_FILE=petclinic-project/docker-compose.yml" >> $GITHUB_ENV
          elif [ -f "docker-compose.yml" ]; then
              echo "COMPOSE_FILE=docker-compose.yml" >> $GITHUB_ENV
          fi

      - name: Cleanup Previous Deployment
        run: |
          echo "Cleaning up previous deployment..."
          
          # Use the compose command we detected
          COMPOSE="${COMPOSE_CMD:-docker compose}"
          $COMPOSE down --remove-orphans --volumes --timeout 30 2>/dev/null || true
          
          echo "Cleaning up standalone containers..."
          docker stop prometheus grafana node-exporter mysql-exporter cadvisor petclinic-app mysql 2>/dev/null || true
          docker rm prometheus grafana node-exporter mysql-exporter cadvisor petclinic-app mysql 2>/dev/null || true
          
          echo "Cleaning up Docker resources..."
          docker system prune -f || true
          
          echo "Cleanup completed!"

      - name: Create Docker Compose Configuration
        run: |
          if [ ! -f "docker-compose.yml" ]; then
              echo "Creating docker-compose.yml..."
              
              # Create docker-compose.yml using echo commands
              echo "version: '3.8'" > docker-compose.yml
              echo "" >> docker-compose.yml
              echo "services:" >> docker-compose.yml
              echo "  mysql:" >> docker-compose.yml
              echo "    image: mysql:8.0" >> docker-compose.yml
              echo "    container_name: mysql" >> docker-compose.yml
              echo "    environment:" >> docker-compose.yml
              echo "      MYSQL_ROOT_PASSWORD: petclinic" >> docker-compose.yml
              echo "      MYSQL_DATABASE: petclinic" >> docker-compose.yml
              echo "    ports:" >> docker-compose.yml
              echo "      - \"3306:3306\"" >> docker-compose.yml
              echo "    volumes:" >> docker-compose.yml
              echo "      - mysql_data:/var/lib/mysql" >> docker-compose.yml
              echo "    healthcheck:" >> docker-compose.yml
              echo "      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]" >> docker-compose.yml
              echo "      timeout: 20s" >> docker-compose.yml
              echo "      retries: 10" >> docker-compose.yml
              echo "    networks:" >> docker-compose.yml
              echo "      - petclinic-network" >> docker-compose.yml
              echo "" >> docker-compose.yml
              echo "  petclinic-app:" >> docker-compose.yml
              echo "    build:" >> docker-compose.yml
              echo "      context: ." >> docker-compose.yml
              echo "      dockerfile: Dockerfile" >> docker-compose.yml
              echo "    container_name: petclinic-app" >> docker-compose.yml
              echo "    ports:" >> docker-compose.yml
              echo "      - \"9500:8080\"" >> docker-compose.yml
              echo "    environment:" >> docker-compose.yml
              echo "      - SPRING_PROFILES_ACTIVE=mysql" >> docker-compose.yml
              echo "      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/petclinic" >> docker-compose.yml
              echo "      - SPRING_DATASOURCE_USERNAME=root" >> docker-compose.yml
              echo "      - SPRING_DATASOURCE_PASSWORD=petclinic" >> docker-compose.yml
              echo "      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus" >> docker-compose.yml
              echo "    depends_on:" >> docker-compose.yml
              echo "      mysql:" >> docker-compose.yml
              echo "        condition: service_healthy" >> docker-compose.yml
              echo "    networks:" >> docker-compose.yml
              echo "      - petclinic-network" >> docker-compose.yml
              echo "" >> docker-compose.yml
              echo "  prometheus:" >> docker-compose.yml
              echo "    image: prom/prometheus:latest" >> docker-compose.yml
              echo "    container_name: prometheus" >> docker-compose.yml
              echo "    ports:" >> docker-compose.yml
              echo "      - \"9090:9090\"" >> docker-compose.yml
              echo "    volumes:" >> docker-compose.yml
              echo "      - ./prometheus.yml:/etc/prometheus/prometheus.yml" >> docker-compose.yml
              echo "      - prometheus_data:/prometheus" >> docker-compose.yml
              echo "    command:" >> docker-compose.yml
              echo "      - '--config.file=/etc/prometheus/prometheus.yml'" >> docker-compose.yml
              echo "      - '--storage.tsdb.path=/prometheus'" >> docker-compose.yml
              echo "      - '--web.console.libraries=/etc/prometheus/console_libraries'" >> docker-compose.yml
              echo "      - '--web.console.templates=/etc/prometheus/consoles'" >> docker-compose.yml
              echo "      - '--storage.tsdb.retention.time=200h'" >> docker-compose.yml
              echo "      - '--web.enable-lifecycle'" >> docker-compose.yml
              echo "    networks:" >> docker-compose.yml
              echo "      - petclinic-network" >> docker-compose.yml
              echo "" >> docker-compose.yml
              echo "  grafana:" >> docker-compose.yml
              echo "    image: grafana/grafana:latest" >> docker-compose.yml
              echo "    container_name: grafana" >> docker-compose.yml
              echo "    ports:" >> docker-compose.yml
              echo "      - \"3000:3000\"" >> docker-compose.yml
              echo "    environment:" >> docker-compose.yml
              echo "      - GF_SECURITY_ADMIN_PASSWORD=admin123" >> docker-compose.yml
              echo "    volumes:" >> docker-compose.yml
              echo "      - grafana_data:/var/lib/grafana" >> docker-compose.yml
              echo "    networks:" >> docker-compose.yml
              echo "      - petclinic-network" >> docker-compose.yml
              echo "" >> docker-compose.yml
              echo "  node-exporter:" >> docker-compose.yml
              echo "    image: prom/node-exporter:latest" >> docker-compose.yml
              echo "    container_name: node-exporter" >> docker-compose.yml
              echo "    ports:" >> docker-compose.yml
              echo "      - \"9100:9100\"" >> docker-compose.yml
              echo "    networks:" >> docker-compose.yml
              echo "      - petclinic-network" >> docker-compose.yml
              echo "" >> docker-compose.yml
              echo "volumes:" >> docker-compose.yml
              echo "  mysql_data:" >> docker-compose.yml
              echo "  prometheus_data:" >> docker-compose.yml
              echo "  grafana_data:" >> docker-compose.yml
              echo "" >> docker-compose.yml
              echo "networks:" >> docker-compose.yml
              echo "  petclinic-network:" >> docker-compose.yml
              echo "    driver: bridge" >> docker-compose.yml
              
              echo "docker-compose.yml created successfully"
          fi

      - name: Create Prometheus Configuration
        run: |
          if [ ! -f "prometheus.yml" ]; then
              echo "Creating prometheus.yml..."
              
              # Create prometheus.yml using echo commands
              echo "global:" > prometheus.yml
              echo "  scrape_interval: 15s" >> prometheus.yml
              echo "" >> prometheus.yml
              echo "scrape_configs:" >> prometheus.yml
              echo "  - job_name: 'petclinic'" >> prometheus.yml
              echo "    static_configs:" >> prometheus.yml
              echo "      - targets: ['petclinic-app:8080']" >> prometheus.yml
              echo "    metrics_path: '/actuator/prometheus'" >> prometheus.yml
              echo "    scrape_interval: 5s" >> prometheus.yml
              echo "" >> prometheus.yml
              echo "  - job_name: 'node-exporter'" >> prometheus.yml
              echo "    static_configs:" >> prometheus.yml
              echo "      - targets: ['node-exporter:9100']" >> prometheus.yml
              echo "" >> prometheus.yml
              echo "  - job_name: 'prometheus'" >> prometheus.yml
              echo "    static_configs:" >> prometheus.yml
              echo "      - targets: ['localhost:9090']" >> prometheus.yml
              
              echo "prometheus.yml created successfully"
          fi

      - name: Verify Docker Configuration
        run: |
          echo "Verifying Docker configuration..."
          
          COMPOSE="${COMPOSE_CMD:-docker compose}"
          COMPOSE_FILE_PATH="${COMPOSE_FILE:-docker-compose.yml}"
          
          if [ -f "$COMPOSE_FILE_PATH" ]; then
              cd "$(dirname "$COMPOSE_FILE_PATH")"
              COMPOSE_FILE="$(basename "$COMPOSE_FILE_PATH")"
              
              echo "Using Docker Compose file: $COMPOSE_FILE"
              echo "In directory: $(pwd)"
              
              if $COMPOSE -f "$COMPOSE_FILE" config >/dev/null 2>&1; then
                  echo "docker-compose.yml is valid"
              else
                  echo "docker-compose.yml has validation issues:"
                  $COMPOSE -f "$COMPOSE_FILE" config || true
              fi
              
              echo "Services defined:"
              $COMPOSE -f "$COMPOSE_FILE" config --services 2>/dev/null || echo "Could not list services"
          fi
          
          echo "Docker configuration verified"

      - name: Deploy Application Stack
        run: |
          echo "Deploying application stack..."
          
          COMPOSE="${COMPOSE_CMD:-docker compose}"
          COMPOSE_FILE_PATH="${COMPOSE_FILE:-docker-compose.yml}"
          
          if [ -n "$COMPOSE_FILE_PATH" ] && [ -f "$COMPOSE_FILE_PATH" ]; then
              cd "$(dirname "$COMPOSE_FILE_PATH")"
              COMPOSE_FILE="$(basename "$COMPOSE_FILE_PATH")"
              echo "Using existing Docker Compose file: $COMPOSE_FILE_PATH"
          else
              COMPOSE_FILE="docker-compose.yml"
              echo "Using created docker-compose.yml"
          fi
          
          mkdir -p prometheus/data grafana/data mysql/data
          chmod -R 755 . 2>/dev/null || true
          
          echo "Building Docker images..."
          $COMPOSE -f "$COMPOSE_FILE" build --no-cache
          
          echo "Starting all services..."
          $COMPOSE -f "$COMPOSE_FILE" up -d
          
          echo "Deployment completed"

      - name: Health Checks
        run: |
          echo "Performing comprehensive health checks..."
          
          check_service() {
              local service_name=$1
              local url=$2
              local max_attempts=$3
              local expected_pattern=$4
              
              echo "Checking $service_name..."
              for i in $(seq 1 $max_attempts); do
                  echo "Attempt $i/$max_attempts for $service_name"
                  
                  if curl -s --connect-timeout 10 --max-time 15 "$url" 2>/dev/null | grep -q "$expected_pattern"; then
                      echo "$service_name is healthy!"
                      return 0
                  fi
                  
                  if [ $i -eq $max_attempts ]; then
                      echo "$service_name health check timeout after $max_attempts attempts"
                      echo "Last response from $url:"
                      curl -s --connect-timeout 5 "$url" 2>/dev/null | head -3 || echo "No response"
                      return 1
                  fi
                  
                  sleep 10
              done
          }
          
          echo "Waiting for all services to fully initialize..."
          sleep 30
          
          echo "Starting health checks..."
          
          check_service "PetClinic App" "http://localhost:9500/actuator/health" 20 "UP" || \
          check_service "PetClinic App (fallback)" "http://localhost:9500" 10 "PetClinic" || \
          echo "PetClinic app check completed with warnings"
          
          check_service "Prometheus" "http://localhost:9090/-/ready" 15 "Prometheus" || \
          check_service "Prometheus (fallback)" "http://localhost:9090" 10 "Prometheus" || \
          echo "Prometheus check completed with warnings"
          
          check_service "Grafana" "http://localhost:3000/api/health" 15 "ok" || \
          check_service "Grafana (fallback)" "http://localhost:3000/login" 10 "Grafana" || \
          echo "Grafana check completed with warnings"
          
          if curl -s --connect-timeout 5 http://localhost:9100/metrics | head -1 | grep -q "node_"; then
              echo "Node Exporter is providing metrics"
          else
              echo "Node Exporter metrics not available"
          fi
          
          if nc -z localhost 3306 2>/dev/null; then
              echo "MySQL port is accessible"
          else
              echo "MySQL port not accessible"
          fi
          
          echo "Health checks completed!"

      - name: Final Deployment Report
        run: |
          echo "=========================================="
          echo "    DEPLOYMENT STATUS REPORT"
          echo "=========================================="
          
          COMPOSE="${COMPOSE_CMD:-docker compose}"
          COMPOSE_FILE_PATH="${COMPOSE_FILE:-docker-compose.yml}"
          
          echo "Docker system info:"
          docker info | head -10
          
          echo ""
          echo "All Docker containers (including stopped):"
          docker ps -a
          
          echo ""
          echo "Docker images:"
          docker images | head -10
          
          echo ""
          echo "Docker volumes:"
          docker volume ls
          
          if [ -f "$COMPOSE_FILE_PATH" ]; then
              cd "$(dirname "$COMPOSE_FILE_PATH")"
              COMPOSE_FILE="$(basename "$COMPOSE_FILE_PATH")"
              
              echo ""
              echo "Compose container status:"
              $COMPOSE -f "$COMPOSE_FILE" ps
              
              echo ""
              echo "Compose services:"
              $COMPOSE -f "$COMPOSE_FILE" config --services
          fi
          
          echo ""
          echo "Service Endpoints:"
          echo "PetClinic Application: http://localhost:9500"
          echo "Health Check: http://localhost:9500/actuator/health"
          echo "Metrics: http://localhost:9500/actuator/prometheus"
          echo "Grafana Dashboard: http://localhost:3000"
          echo "Default Login: admin/admin123"
          echo "Prometheus Metrics: http://localhost:9090"
          echo "Targets: http://localhost:9090/targets"
          echo "Node Exporter: http://localhost:9100/metrics"
          echo "MySQL Database: localhost:3306"
          
          echo ""
          echo "Management Commands:"
          echo "View logs: ${COMPOSE_CMD:-docker compose} logs [service-name]"
          echo "Stop services: ${COMPOSE_CMD:-docker compose} down"
          echo "Restart service: ${COMPOSE_CMD:-docker compose} restart [service-name]"
          
          echo ""
          echo "NOTE: Containers should persist on self-hosted runner"
          echo "If containers are missing, check the build/deploy steps above"
          echo "DEPLOYMENT COMPLETED SUCCESSFULLY!"

      - name: Save Deployment Logs
        if: always()
        run: |
          echo "Collecting deployment logs..."
          mkdir -p logs
          
          COMPOSE="${COMPOSE_CMD:-docker compose}"
          COMPOSE_FILE_PATH="${COMPOSE_FILE:-docker-compose.yml}"
          if [ -f "$COMPOSE_FILE_PATH" ]; then
              cd "$(dirname "$COMPOSE_FILE_PATH")"
              COMPOSE_FILE="$(basename "$COMPOSE_FILE_PATH")"
              $COMPOSE -f "$COMPOSE_FILE" logs > "$GITHUB_WORKSPACE/logs/docker-compose.log" 2>&1 || true
          fi
          
          docker logs petclinic-app > logs/petclinic-app.log 2>&1 || true
          docker logs prometheus > logs/prometheus.log 2>&1 || true
          docker logs grafana > logs/grafana.log 2>&1 || true
          docker logs mysql > logs/mysql.log 2>&1 || true
          
          echo "Logs collected"

      - name: Upload Deployment Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: logs/
          retention-days: 7

  cleanup:
    needs: [build-and-test, docker-build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Cleanup Resources
        run: |
          echo "=========================================="
          echo "       WORKFLOW EXECUTION SUMMARY"
          echo "=========================================="
          echo "Run ID: ${{ github.run_id }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Timestamp: $(date)"
          echo "Event: ${{ github.event_name }}"
          
          if [ "${{ needs.docker-build-and-deploy.result }}" == "success" ]; then
              echo ""
              echo "SUCCESS! Your PetClinic application should be running on your WSL!"
              echo ""
              echo "Spring PetClinic Application: DEPLOYED"
              echo "MySQL Database: RUNNING"
              echo "Prometheus Monitoring: ACTIVE" 
              echo "Grafana Dashboards: AVAILABLE"
              echo "Node Exporter: COLLECTING METRICS"
              echo ""
              echo "Quick Access URLs (on your WSL machine):"
              echo "• Application: http://localhost:9500"
              echo "• Monitoring: http://localhost:3000 (admin/admin123)"
              echo "• Metrics: http://localhost:9090"
              echo ""
              echo "To check containers on your WSL:"
              echo "docker ps -a"
              echo "docker compose logs"
          elif [ "${{ needs.docker-build-and-deploy.result }}" == "failure" ]; then
              echo ""
              echo "DEPLOYMENT FAILED - Check the logs for details"
              echo ""
              echo "Common Issues:"
              echo "1. Port conflicts - Check if ports 9500, 3000, 9090, 3306 are available"
              echo "2. Docker resources - Try docker system prune -f"
              echo "3. Memory issues - Check available memory"
              echo "4. File permissions in WSL"
          fi
          
          echo ""
          echo "=========================================="
          echo "    CLEANUP COMPLETED"
          echo "=========================================="